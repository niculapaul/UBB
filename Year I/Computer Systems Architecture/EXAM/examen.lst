     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fopen, fread, fclose, printf           ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  
    15                                  import fclose msvcrt.dll
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 7200                        access_mode db "r", 0
    19 00000002 00<rept>                    file_name times 100 db 0
    20 00000066 00                          N db 0
    21                                     
    22 00000067 FFFFFFFF                    file_descriptor dd -1
    23                                      
    24 0000006B 00<rept>                    text times 100 db 0
    25                                      
    26 000000CF 257300                      format_filename db "%s", 0
    27 000000D2 256400                      format db "%d", 0
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          
    33                                          ; citire nume fisier
    34 00000000 68[02000000]                    push dword file_name
    35 00000005 68[CF000000]                    push dword format_filename
    36 0000000A FF15[00000000]                  call [scanf]     
    37 00000010 83C408                          add esp, 4*2
    38                                          
    39                                          ; citire index bit cu validare
    40                                          validare:
    41                                          
    42 00000013 68[66000000]                    push dword N
    43 00000018 68[D2000000]                    push dword format
    44 0000001D FF15[00000000]                  call [scanf]     
    45 00000023 83C408                          add esp, 4*2
    46                                          
    47 00000026 A0[66000000]                    mov al, byte[N]
    48 0000002B 3C00                            cmp al, 0
    49 0000002D 7CE4                            jl validare
    50                                          
    51 0000002F 3C07                            cmp al, 7
    52 00000031 7FE0                            jg validare
    53                                          
    54                                          ; deschidere fisier
    55 00000033 68[00000000]                    push dword access_mode
    56 00000038 68[02000000]                    push dword file_name
    57 0000003D FF15[00000000]                  call [fopen]
    58 00000043 83C408                          add esp, 4*2
    59                                          
    60 00000046 A3[67000000]                    mov [file_descriptor], eax       
    61                                        
    62 0000004B 83F800                          cmp eax, 0
    63 0000004E 746B                            je final
    64                                          
    65                                          ; citire din fisier (max 100 caractere)
    66 00000050 FF35[67000000]                  push dword [file_descriptor]
    67 00000056 6A64                            push dword 100
    68 00000058 6A01                            push dword 1
    69 0000005A 68[6B000000]                    push dword text
    70 0000005F FF15[00000000]                  call [fread]
    71 00000065 83C410                          add esp, 4*4
    72                                          
    73                                          ; adresa stringului de prelucrat
    74 00000068 BE[6B000000]                    mov esi, text
    75                                          
    76                                          ; il folosim drept contor in loc de ecx pentru loop, pentru ca avem nevoie de cl la shiftari si se va modifica
    77 0000006D 89C7                            mov edi, eax
    78                                          
    79                                          ; aici retinem suma bitilor
    80 0000006F BA00000000                      mov edx, 0
    81                                          
    82                                          ; asta va fi masca noastra pentru a prelua al N-lea bit
    83 00000074 B380                            mov bl, 10000000b
    84 00000076 8A3D[66000000]                  mov bh, byte[N]
    85 0000007C 88F9                            mov cl, bh
    86 0000007E D2EB                            shr bl, cl
    87                                          
    88                                          ; cu atatea pozitii vom shifta al N-lea bit ca sa il putem aduna la suma la final
    89 00000080 8A25[66000000]                  mov ah, byte[N]
    90 00000086 80EC07                          sub ah, 7
    91 00000089 F6DC                            neg ah
    92 0000008B 88E1                            mov cl, ah
    93                                          
    94                                          repeta:
    95 0000008D AC                                  lodsb
    96 0000008E 20D8                                and al, bl          
    97 00000090 D2E8                                shr al, cl
    98 00000092 3C00                                cmp al, 0
    99 00000094 7401                                je skip
   100                                              
   101 00000096 42                                  inc edx
   102                                              
   103                                              skip:
   104 00000097 4F                                  dec edi
   105 00000098 83FF00                              cmp edi, 0
   106 0000009B 75F0                                jne repeta
   107                                          
   108                                          afisare:
   109                                          
   110 0000009D 52                              push edx
   111 0000009E 68[D2000000]                    push dword format
   112 000000A3 FF15[00000000]                  call [printf]
   113 000000A9 83C408                          add esp, 4*2
   114                                          
   115                                          ;push dword text
   116                                          ;push dword format_filename
   117                                          ;call [printf]
   118                                          ;add esp, 4*2
   119                                          
   120 000000AC FF35[67000000]                  push dword[file_descriptor]
   121 000000B2 FF15[00000000]                  call [fclose]
   122 000000B8 83C404                          add esp, 4
   123                                          
   124                                          final:
   125                                      
   126                                          ; exit(0)
   127 000000BB 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   128 000000BD FF15[00000000]                  call    [exit]       ; call exit to terminate the program
