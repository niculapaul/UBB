     1                                  ;Given the word A, compute the doubleword B as follows:
     2                                  ;the bits 0-3 of B have the value 0;
     3                                  ;the bits 4-7 of B are the same as the bits 8-11 of A
     4                                  ;the bits 8-9 and 10-11 of B are the invert of the bits 0-1 of A (so 2 times) ;
     5                                  ;the bits 12-15 of B have the value 1
     6                                  ;the bits 16-31 of B are the same as the bits 0-15 of B.
     7                                  
     8                                  ; Observation: bits are numbered from right to left
     9                                  
    10                                  bits 32 ;assembling for the 32 bits architecture
    11                                  ; the start label will be the entry point in the program
    12                                  global  start 
    13                                  
    14                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    15                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    16                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    17                                          
    18                                  segment  data use32 class=data ; the data segment where the variables are declared 
    19 00000000 5677                         a dw 0111011101010110b
    20 00000002 00000000                     b dd 0
    21                                  
    22                                  segment  code use32 class=code ; code segment
    23                                  start: 
    24                                  
    25 00000000 66BB0000                     mov  bx, 0 ; we compute the first half of the result in bx
    26                                       
    27                                       ; 1. The bits 0-3 are already initialised with 0 (along with all the others), so there is no need
    28                                       ; to perform other instructions in order to modify the bits
    29                                  
    30                                       
    31                                       ; 2. We should now isolate bits 8-11 of A and put them into the result
    32 00000004 66A1[00000000]               mov  ax, [a]               ; ax = 0111011101010110b
    33 0000000A 6625000F                     and  ax, 0000111100000000b ; ax = 0000011100000000b
    34 0000000E B104                         mov  cl, 4                 ; cl = 4
    35 00000010 66D3C8                       ror  ax, cl ; we rotate 4 positions to the right: ax = 0000000001110000b
    36 00000013 6609C3                       or   bx, ax ; we put the bits into the result:    bx = 0000000001110000b
    37                                      
    38                                      
    39                                       ; 3. We invert the bits of A, isolate bits 0-1 of A, then put the 8-9 bits of B into the result
    40 00000016 66A1[00000000]               mov ax, [a]                ; ax = 0111011101010110b
    41 0000001C 66F7D0                       not ax                     ; we invert the bits of A: ax = 1000100010101001b
    42 0000001F 6683E003                     and ax, 0000000000000011b  ; we isolate bits 0-1:     ax = 0000000000000001b
    43 00000023 B108                         mov cl, 8                  ; cl = 8
    44 00000025 66D3C0                       rol ax, cl ; we rotate 8 positions to the left: ax = 0000000100000000b
    45 00000028 6609C3                       or bx, ax  ; we put the bits into the result:   bx = 0000000101110000b
    46                                       
    47                                       ; and now we repeat the process above in order to obtain bits 10-11
    48 0000002B 66A1[00000000]               mov ax, [a]                ; ax = 0111011101010110b
    49 00000031 66F7D0                       not ax                     ; we invert the bits of A: ax = 1000100010101001b
    50 00000034 6683E003                     and ax, 0000000000000011b  ; we isolate bits 0-1:     ax = 0000000000000001b
    51 00000038 B10A                         mov cl, 10                 ; cl = 10
    52 0000003A 66D3C0                       rol ax, cl ; we rotate 10 positions to the left: ax = 0000010000000000b
    53 0000003D 6609C3                       or bx, ax  ; we put the bits into the result:    bx = 0000010101110000b
    54                                       
    55                                       
    56                                       ; 4. We now set the value of the bits 12-15 to 1
    57 00000040 66B800F0                     mov ax, 1111000000000000b ; ax = 1111000000000000b
    58 00000044 6609C3                       or bx, ax                 ; we put the bits into the result: bx = 1111010101110000b
    59                                       
    60                                       
    61                                       ; 5. Now, we need to duplicate bits 0-15 in order to obtain bits 16-31
    62 00000047 6689D8                       mov ax, bx ; we make a copy of bits 0-15: ax = 1111010101110000b
    63                                       
    64                                       ; We can now put together the whole result
    65 0000004A 6650                         push ax
    66 0000004C 6653                         push bx
    67 0000004E 58                           pop eax ; We obtain the result in eax: eax = 1111010101110000 1111010101110000b
    68                                       
    69 0000004F A3[02000000]                 mov  [b], eax ; We move the result from the register to the result variable
    70                                       ; b = 1111010101110000 1111010101110000b
    71                                  
    72 00000054 6A00                         push dword 0 ;saves on stack the parameter of the function exit
    73 00000056 FF15[00000000]               call [exit] ;function exit is called in order to end the execution of the program	
