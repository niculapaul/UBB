     1                                  bits 32 ;assembling for the 32 bits architecture
     2                                  global start
     3                                  
     4                                  ; we ask the assembler to give global visibility to the symbol called start 
     5                                  ;(the start label will be the entry point in the program) 
     6                                  extern exit ; we inform the assembler that the exit symbol is foreign; it exists even if we won't be defining it
     7                                  import exit msvcrt.dll  ; we specify the external library that defines the symbol
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  
    10                                  ; our variables are declared here (the segment is called data) 
    11                                  segment data use32 class=data
    12 00000000 11                          a db 11h
    13 00000001 2211                        b dw 1122h
    14 00000003 44332211                    c dd 11223344h
    15 00000007 8877665544332211            d dq 1122334455667788h
    16                                      
    17                                  ; the program code will be part of a segment called code
    18                                  segment code use32 class=code
    19                                  start:
    20                                  
    21 00000000 8B1D[07000000]              mov EBX, [d]    ; EBX = 55667788h
    22 00000006 8B0D[0B000000]              mov ECX, [d+4]  ; ECX = 11223344h
    23                                      
    24 0000000C 66A1[01000000]              mov AX, [b]     ; AX = 1122h
    25 00000012 98                          cwde            ; EAX = AX = 00001122h
    26 00000013 99                          cdq             ; EAX = 00001122h, EDX = 00000000h
    27 00000014 29C3                        sub EBX, EAX    ; EBX = EBX - EAX = 55667788h - 00001122h = 55666666h
    28 00000016 19D1                        sbb ECX, EDX    ; ECX = ECX - EDX = 11223344h - 00000000h = 11223344h
    29                                      
    30 00000018 A0[00000000]                mov AL, [a]     ; AL = 11h
    31 0000001D 6698                        cbw             ; AX = 0011h
    32 0000001F 98                          cwde            ; EAX = 00000011h
    33 00000020 99                          cdq             ; EAX = 00000011h, EDX = 00000000h
    34 00000021 29C3                        sub EBX, EAX    ; EBX = EBX - EAX = 55666666h - 00000011h = 55666655h
    35 00000023 19D1                        sbb ECX, EDX    ; ECX = ECX - EDX - CF = 11223344h - 00000000h - CF = 11223344h
    36                                  
    37                                      
    38 00000025 66A1[01000000]              mov AX, [b]     ; AX = 1122h
    39 0000002B 98                          cwde            ; EAX = AX = 00001122h
    40 0000002C 8B15[03000000]              mov EDX, [c]    ; EDX = 11223344h
    41 00000032 29D0                        sub EAX, EDX    ; EAX = EAX - EDX = 00001122h - 11223344h = EEDDDDDEh
    42 00000034 99                          cdq             ; EAX = EEDDDDDEh, EDX = FFFFFFFFh
    43                                      
    44 00000035 29C3                        sub EBX, EAX    ; EBX = EBX - EAX = 55666655h - EEDDDDDEh = 66888877h
    45 00000037 19D1                        sbb ECX, EDX    ; ECX = ECX - EDX = 11223344h - FFFFFFFFh = 11223344h
    46                                      
    47                                      
    48                                      ; call exit(0) ), 0 represents status code: SUCCESS
    49 00000039 6A00                        push dword 0 ; saves on stack the parameter of the function exit
    50 0000003B FF15[00000000]              call [exit] ; function exit is called in order to end the execution of the program
