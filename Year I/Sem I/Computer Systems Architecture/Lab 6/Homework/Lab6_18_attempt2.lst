     1                                  ; A string of doublewords is given. Order in increasing order the string of the high words (most significant) from these doublewords.
     2                                  ; The low words (least significant) remain unchanged.
     3                                  
     4                                  
     5                                  bits 32 ; assembling for the 32 bits architecture
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 7856AB12CDAB561244-         string DD 12AB5678h, 1256ABCDh, 12344344h
    17 00000009 433412             
    18                                      len EQU ($-string)/4 ; This variable will store the length of the string; the division by 4 occurs because we store a string of dwords
    19 0000000C <res 0000000C>              dest RESD len     ; We reserve a space in the memory for the destination string (we basically reserve the space necessary for a dword times the length of the initial string)
    20 00000018 00000000                    len_dest DD 0     ; This variable stores the length of the new string of dwords - we initialize it with 0 because we will perform insertion sort
    21                                  
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                      ; The method used in this exercise is Insertion Sort
    27                                      ; We sort the dwords using this algorithm, then 
    28 00000000 B903000000                      MOV ECX, len    ; We will have len iterations in the loop
    29 00000005 BE[00000000]                    MOV ESI, string ; We initialize ESI with the address of string
    30 0000000A FC                              CLD             ; The comparisons will take place from left to right
    31 0000000B E353                            JECXZ finish    ; If the length of the string is 0, we directly jump to the end of the program
    32                                          
    33                                          ; This is the main loop, where we do the sort
    34                                          outer_loop:
    35 0000000D B800000000                          MOV EAX, 0 ; This is how we ensure the high part of the dword is 0, so that the comparisons takes place properly
    36 00000012 AD                                  LODSD      ; We firstly load the low part of the current dword in AX
    37 00000013 51                                  push ECX   ; We store the current value of ECX, which we will need later, in the stack, because in the inner loop we need different values of ECX
    38 00000014 8B0D[18000000]                      MOV ECX, [len_dest] ; We set the value of ECX to the value of the current destination string of dwords length
    39 0000001A E319                                JECXZ skip          ; If the length of the destination string is 0, we go directly to the skip label
    40                                              
    41                                              inner_loop:
    42                                              ; Now we properly do the insertion part of the insertion sort
    43                                              ; At the offset (ECX-1)*4 is the element to be compared with AX --- multiplication with 4 is required for pointer arithmetic, because we work with dwords (4*byte)
    44 0000001C 3B048D[08000000]                        CMP EAX, [dest+(ECX-1)*4]   ; We compare the words (the high part of the words is ensured to be 0)
    45 00000023 7710                                    JA skip                    ; If AX is bigger, no more comparisons are needed and we can directly go to the skip label, then insert EAX in the destination string 
    46 00000025 8B1C8D[08000000]                        MOV EBX, [dest + (ECX-1)*4]; If AX is smaller, we "shift" the current value in the destination string to the right, in order to "make space" for the element to be inserted
    47 0000002C 891C8D[0C000000]                        MOV [dest + ECX*4], EBX    ; We used the EBX register to shift the value
    48 00000033 E2E7                                loop inner_loop
    49                                              
    50                                              skip:
    51 00000035 89048D[0C000000]                    MOV [dest+ECX*4], EAX ; We now insert EAX in the destination string - at the moment, the high part of the dwords in the initial string are stored as low parts, so we need to shift it later
    52 0000003C FF05[18000000]                      INC dword[len_dest]   ; The destination string has now one more element, so we increase the variable that stores the destination string length
    53 00000042 59                                  pop ECX               ; We now restore the previous value of ECX in order to continue the outer loop
    54 00000043 E2C8                            loop outer_loop
    55                                          
    56                                          
    57                                          ; We will now shift the low parts of the dwords in the destination string in order to make them high parts and then move the low parts of the dwords
    58                                          ; of the source string in the destination string
    59 00000045 B903000000                      MOV ECX, len    ; We could also use len_dest, because at this point they are both equal
    60 0000004A BE[00000000]                    MOV ESI, string ; We initialize ESI
    61 0000004F BF[0C000000]                    MOV EDI, dest   ; We initialize EDI
    62                                          
    63                                          loop_3:
    64 00000054 66AD                                LODSW               ; We load the low part of the current dword in the source string in AX
    65                                    ; We shift the low part from the current dword in the destination string to the lift, thus making it a high part now
    66 00000056 66AB                                STOSW               ; We store the low part of the current dword in the source string as the low part of the current dword in the destination string
    67 00000058 83C602                              ADD ESI, 2          ; We move to the next dword in the source string
    68 0000005B 83C702                              ADD EDI, 2          ; We move to the next dword in the destination string
    69 0000005E E2F4                            loop loop_3
    70                                          
    71                                          finish:
    72                                      
    73                                          ; exit(0)
    74 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
